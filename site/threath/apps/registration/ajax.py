""" Registration AJAX views """

import json
import re
import threading

from django.contrib.auth import authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login as auth_login
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.http import HttpResponse, HttpResponseBadRequest
from django.utils.translation import ugettext as _
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect
from django.template.loader import render_to_string
from django.template import RequestContext
from django.core.validators import email_re
from registration.models import Registration
from registration.forms import SignupForm
from registration.utils import check_username
from globals.shortcuts import HttpJsonResponse
from globals.utils import create_fake_user_with_email

def ajax_process_sign_up_form(request):
    """ Site generic registration signup view """
    registration_id = ''
    msg = ''
    tpl_type = request.REQUEST.get('template_type')
    Template = {
        'landing': 'inc_registration_form.html',
        'popup': 'inc_popup_signup.html',
    }
    status = False
    if request.method == "POST":
        form = SignupForm(request.POST)
        if form.is_valid():
            data = form.save(commit=False)
            if form.is_resend:
                user = User.objects.get(email=data.email)
                msg = _('Your account has been registered but not activated yet. We have resend you an activation email, please check your inbox and click the activation link.')
                
                if not user.has_usable_password(): #user is generated by system before
                    msg = _('Your account needs to be activated by email, please check your inbox and click the activation link.')
                    user.username = data.username    
                    
                user.set_password(data.password)
                
                # disable old registration objects to make sure that the user's account cannot be activated by old activation link
                Registration.objects.disable_user_registration_entries(user)
                
                # recreate a registration object for the new user
                registration = Registration.objects.create_registration_obj_for_user(user)
                
                user.save()    
            else:
                # create a new user and set user status to inactive
                new_user = User.objects.create_user(data.username, data.email, data.password)
                new_user.is_active = False
                new_user.save()
                
                # create a registration object for the new user
                registration = Registration.objects.create_registration_obj_for_user(new_user)

                msg = _('Your account needs to be activated by email, please check your inbox and click the activation link.')
                status = True
            registration_id = registration.id

        html = render_to_string(Template[tpl_type], { 'registration_form': form, 'status':status, 'msg':msg }, context_instance = RequestContext(request))
    else:
        form = SignupForm()
        html = render_to_string(Template[tpl_type], { 'registration_form': form, 'status':status, 'msg':msg  }, context_instance = RequestContext(request))
        return HttpResponse(html, mimetype="text/html")
    response = {'html': html, 'status': status, 'registration_id': registration_id}
    return HttpResponse(json.dumps(response), mimetype="application/json")

def ajax_send_activation_mail(request, registration_id):
    status = False
    try:
        registration = Registration.objects.get(id=registration_id)
        registration.send_activation_mail()
        status = True
    except:
        pass
    return HttpResponse(json.dumps({'status':status}), mimetype="application/json")


def ajax_send_reset_password_mail(request):
    '''
    This function check if the user in request of resend password is 
    '''
    username = request.POST.get('username')
    try:
        user = User.objects.get(username__iexact=username, is_active=True)
    except:
        response = {'success': False, 'msg': _('Please enter a valid username.')}
        return HttpResponse(json.dumps(response), mimetype="application/json")
    try:
        registration = Registration.objects.create(user = user)
        registration.gen_activation_code()
        registration.send_forget_password_mail()
        response = {'success': True, 'msg': _('Please check your email to reset your password.')}
    except:
        response = {'success': False, 'msg': _('Failed to send the reset password mail, please try again later.')}
    return HttpResponse(json.dumps(response), mimetype="application/json")

def ajax_check_username(request):
    username = request.POST.get('username')
    rule = re.compile('^[\.\w-]+$')
    try:
        rule.match(username).group()
    except:
        return HttpJsonResponse(success=False)
    if check_username(username) is False:
        return HttpJsonResponse(success=False)
    return HttpJsonResponse()

    